generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String?
  role      RoleEnum @default(USER)
  password  String?

  profile     Profile?
  transaction Transaction?
  cart Cart[]

  @@map("user")
}

model Profile {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  address   String?
  phone     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    Int       @unique
  gender    String?
  image     String?

  profile User @relation(fields: [userId], references: [id] ,onDelete:Cascade)

  @@map("profile")
}

model TransactionItem {
  id          Int           @id @default(autoincrement())
  itembuy Int?
  price       Int?
  subtotal    Int?
  createAt    DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  status      StatusPayment @default(PENDING)

  productId     Int
  transactionId Int

  transaction Transaction @relation(fields: [transactionId], references: [id] ,onDelete:Cascade )
  produk      Product     @relation(fields: [productId], references: [id] ,onDelete:Cascade)

  @@map("transaction_item")
}

model Transaction {
  id               Int       @id @default(autoincrement())
  total_amont      Int?
  payment_method   String?
  status           String?
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  userId           Int       @unique
  

  user User @relation(fields: [userId], references: [id] ,onDelete: Cascade)

  transaction TransactionItem[]

  @@map("transaction")
}
model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      

  user User @relation(fields: [userId], references: [id] , onDelete:Cascade)
  cartItem CartItem[]
}
model CartItem {
  id Int @id @default(autoincrement())
  cartId Int
  productId Int @unique
  quantity Int

  cart Cart @relation(fields: [cartId], references: [id] , onDelete:Cascade)
  product Product @relation(fields: [productId], references: [id] , onDelete:Cascade)
}
model Product {
  id          Int      @id @default(autoincrement())
  nameProduct String?
  desc        String?
  stock       Int?
  price       Int?
  image            ProductImage[]
  transcation_item TransactionItem[]
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt

  cart CartItem?

  categoryId      Int
  categoryProduct Category @relation(fields: [categoryId], references: [id] ,onDelete:Cascade)

  @@map("product")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String?
  productId Int

  image Product @relation(fields: [productId], references: [id] ,onDelete:Cascade )

  @@map("product_image")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String?
  userId   Int
  products Product[]

  @@map("category")
}

enum RoleEnum {
  ADMIN
  USER

  @@map("role_enum")
}

enum StatusPayment {
  PENDING
  COMPLETED
  CANCELLED

  @@map("status")
}
