// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId     Product[]
  orederId      Order[]
  transactionId UserOnTransaction[]
  profile       Profile?
  role          RoleEnum            @default(USER)

  @@map("user")
}

model Profile {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  address   String?
  phone     String?
  gender    String?
  image     String?
  createAt  DateTime? @default(now())
  updateAt  DateTime? @updatedAt

  userId  Int  @unique
  profile User @relation(fields: [userId], references: [id])

  // user_id
}

model TransactionItem {
  id       Int       @id @default(autoincrement())
  quantity Int?
  price    Decimal?
  subtotal Float?
  createAt DateTime? @default(now())
  updateAt DateTime? @updatedAt

  productId          Int
  productOnTransItem Product @relation(fields: [productId], references: [id])

  transactionId          Int
  transactionOnTransItem Transaction @relation(fields: [transactionId], references: [id])

  // produk_id
  // transaction_id 
}

model Transaction {
  id               Int       @id @default(autoincrement())
  transaction_date DateTime?
  total_amont      Decimal?
  payment_method   String?
  status           String?
  createAt         DateTime? @default(now())
  updateAt         DateTime? @updatedAt

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  transactionOnTransItem TransactionItem[]
  user                   UserOnTransaction[]
}

model UserOnTransaction {
  userId        Int
  transactionId Int

  user        User        @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@id([userId, transactionId])
  @@map("user_on_transaction")
}

model Order {
  id          Int       @id @default(autoincrement())
  totalAmount Decimal?  @default(0.0)
  status      String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  transaction Transaction[]

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  nameProduct String
  desc        String?
  quantity    Int?
  price       Decimal?
  img         String?

  userId          Int
  cateId          Int
  categoryProduct Category @relation(fields: [cateId], references: [id])
  userProduct     User     @relation(fields: [userId], references: [id])

  productOnImage     ProductImage[]
  productOnTransItem TransactionItem[]

  @@map("product")
}

model ProductImage {
  id   Int     @id @default(autoincrement())
  url  String
  type String? // example tumbnail or product image

  productId      Int
  productOnImage Product @relation(fields: [productId], references: [id])

  @@map("product_image")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("category")
}

enum RoleEnum {
  ADMIN
  USER

  @@map("role_enum")
}
